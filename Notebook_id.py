# -*- coding: utf-8 -*-
"""Proyek Analisis DataE_Commerce.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N-V1IqvR8BdhKAvnlaYlY9dI4J3gnObU

# Proyek Analisis Data: E-Commerce Public Dataset
- Nama: ** Syaripatul Aini**
- Email: **m014b4kx4264@bangkit.academy**
- Id Dicoding: **syrpaaini**

## Menentukan Pertanyaan Bisnis

- Apa saja Produk yang paling laris dan tidak?
- Seberapa banyak uang yang dihabiskan oleh customer dalam beberapa bulan terakhir ini?
- Bagaimana performa penjualan pada platform E-Commerce dalam waktu ke waktu?
- Bagaimana tingkat kepuasan customer terhadap layanan kami?
- berdasarkan profil demografis customer dan apakah ada perbedaan preferensi pembelian di antara mereka?
- Darimana saja Customer terbanyak berdasarkan letak geografis?

## Menyaipkan semua library yang dibuthkan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import urllib
!pip install unidecode
import unidecode
import matplotlib.image as mpimg

"""## Data Wrangling

### Gathering Data
"""

customers_df = pd.read_csv('/content/customers_dataset.csv')
customers_df.head()

geo_df = pd.read_csv('/content/geolocation_dataset.csv')
geo_df.head()

order_items = pd.read_csv('/content/order_items_dataset.csv')
order_items.head()

order_pay = pd.read_csv('/content/order_payments_dataset.csv')
order_pay.head()

order_rev = pd.read_csv('/content/order_reviews_dataset.csv')
order_rev.head()

orders_df = pd.read_csv('/content/orders_dataset.csv')
orders_df.head()

product_cat = pd.read_csv('/content/product_category_name_translation.csv')
product_cat.head()

products_df = pd.read_csv('/content/products_dataset.csv')
products_df.head()

sellers_df = pd.read_csv('/content/sellers_dataset.csv')
sellers_df.head()

"""### Assessing Data
*Menilai Data*
"""

print('\n', customers_df.info())
print('\n', geo_df.info())
print('\n', order_items.info())
print('\n', order_pay.info())
print('\n', order_rev.info())
print('\n', orders_df.info())
print('\n', product_cat.info())
print('\n', products_df.info())
print('\n', sellers_df.info())

"""*apakah ada data null pada setiap DataFrame ?*"""

print('\nInfo data null customers:\n', customers_df.isnull().sum())
print('\nInfo data null geolocation:\n', geo_df.isnull().sum())
print('\nInfo data null order items:\n', order_items.isnull().sum())
print('\nInfo data null order payments:\n', order_pay.isnull().sum())
print('\nInfo data null order reviews:\n', order_rev.isnull().sum())
print('\nInfo data null orders:\n', orders_df.isnull().sum())
print('\nInfo data null product category:\n', product_cat.isnull().sum())
print('\nInfo data null products:\n', products_df.isnull().sum())
print('\nInfo data null sellers:\n', sellers_df.isnull().sum())

"""*ada data duplikat pada setiap DataFrame?*"""

print('Info data duplikat customers:', customers_df.duplicated().sum())
print('Info data duplikat geolocation:', geo_df.duplicated().sum())
print('Info data duplikat order items:', order_items.duplicated().sum())
print('Info data duplikat order payments:', order_pay.duplicated().sum())
print('Info data duplikat order reviews:', order_rev.duplicated().sum())
print('Info data duplikat orders:', orders_df.duplicated().sum())
print('Info data duplikat product category:', product_cat.duplicated().sum())
print('Info data duplikat products:', products_df.duplicated().sum())
print('Info data duplikat sellers:', sellers_df.duplicated().sum())

print('\nData describe customers:\n', customers_df.describe(include='all'))
print('\nData describe geolocation:\n', geo_df.describe(include='all'))
print('\nData describe order items:\n', order_items.describe(include='all'))
print('\nData describe order payments:\n', order_pay.describe(include='all'))
print('\nData describe order reviews:\n', order_rev.describe(include='all'))
print('\nData describe orders:\n', orders_df.describe(include='all'))
print('\nData describe product category:\n', product_cat.describe(include='all'))
print('\nData describe products:\n', products_df.describe(include='all'))
print('\nData describe sellers:\n', sellers_df.describe(include='all'))

geo_df.info()

"""### Cleaning Data

Data duplikat tedapat pada Geolocation dataset, oleh karenanya drop duplikat tidak dilakukan. Mungkin pada kolom *'geolocation_city', 'geolocation_state'* value tertinggi adalah **sao paulo (SP)**
"""

order_rev[order_rev.review_comment_title.isna()]

order_rev.review_comment_title.value_counts()

order_rev[order_rev.review_comment_message.isna()]

order_rev.review_comment_message.value_counts()

order_rev.fillna(value="no comment", inplace=True)

orders_df[orders_df.order_approved_at.isna()]

datetime_oi = ["shipping_limit_date"]

for column in datetime_oi:
  order_items[column] = pd.to_datetime(order_items[column])

datetime_or = ["review_creation_date","review_answer_timestamp"]

for column in datetime_or:
  order_rev[column] = pd.to_datetime(order_rev[column])

datetime_oo = ["order_purchase_timestamp","order_approved_at","order_delivered_carrier_date","order_delivered_customer_date","order_estimated_delivery_date"]

for column in datetime_oo:
  orders_df[column] = pd.to_datetime(orders_df[column])

order_items.info()

order_rev.info()

orders_df.info()

"""## Exploratory Data Analysis (EDA)

### Explore **customers_df**
"""

customers_df.sample(5)

customers_df.describe(include='all')

customers_df.customer_id.is_unique

customers_df.customer_id.duplicated

customers_df.groupby(by="customer_city").customer_id.nunique().sort_values(ascending=False)

customers_df.groupby(by="customer_state").customer_id.nunique().sort_values(ascending=False)

order_pay.sample(5)

order_pay.describe(include='all')

order_pay.groupby(by="payment_type").order_id.nunique().sort_values(ascending=False)

orders_df.sample(5)

delivery_time = orders_df["order_delivered_customer_date"] - orders_df["order_delivered_carrier_date"]
delivery_time = delivery_time.apply(lambda x: x.total_seconds())
orders_df["delivery_time"] = round(delivery_time/86400)

orders_df.sample(5)

orders_df.delivery_time.hist()

customer_id_in_orders_df = orders_df.customer_id.values

customers_df["status"] = customers_df["customer_id"].apply(lambda x: "Active" if x in customer_id_in_orders_df else "Non Active")

customers_df.sample(5)

customers_df.groupby(by="status").customer_id.count()

"""Merge customers_df & orders_df

Visualization & Explanatory Analysis
"""

cust_orders_df = pd.merge(
    left=customers_df,
    right=orders_df,
    how="left",
    left_on="customer_id",
    right_on="customer_id"
)
cust_orders_df.head()

cust_orders_df.groupby(by="customer_city").order_id.nunique().sort_values(ascending=False).head(10)

cust_orders_df.groupby(by="customer_state").order_id.nunique().sort_values(ascending=False).head(10)

cust_orders_df.groupby(by="customer_zip_code_prefix").order_id.nunique().sort_values(ascending=False).head(10)

cust_orders_df.groupby(by="order_status").order_id.nunique().sort_values(ascending=False).head(10)

"""**Merge order_pay & order_rev**"""

order_payrev_df = pd.merge(
    left=order_pay,
    right=order_rev,
    how="left",
    left_on="order_id",
    right_on="order_id"
)
order_payrev_df.head()

order_payrev_df.groupby(by="payment_type").order_id.nunique().sort_values(ascending=False).head(10)

order_payrev_df.sort_values(by="payment_value", ascending=False)

order_payrev_df.groupby(by="payment_type").agg({
    "order_id": "nunique",
    "payment_value":  ["min", "max"]
})

"""#### Merge cust_orders_df & order_payrev"""

customers_df = pd.merge(
    left=cust_orders_df,
    right=order_payrev_df,
    how="left",
    left_on="order_id",
    right_on="order_id"
)
customers_df.head()

"""### Explore order_items & sellers_df

#### Merge order_items & sellers_df
"""

item_seller_df = pd.merge(
    left=order_items,
    right=sellers_df,
    how="left",
    left_on="seller_id",
    right_on="seller_id"
)
item_seller_df.head()

item_seller_df.groupby(by="seller_city").seller_id.nunique().sort_values(ascending=False).head(10)

"""### Explore products_df & product_cat
#### Merge products_df & product_cat
"""

product_df = pd.merge(
    left=products_df,
    right=product_cat,
    how="left",
    left_on="product_category_name",
    right_on="product_category_name"
)
product_df.head()

product_df.groupby(by="product_category_name").product_id.nunique().sort_values(ascending=False).head(10)

product_df.groupby(by="product_category_name_english").product_id.nunique().sort_values(ascending=False).head(10)

"""#### Merge item_seller_df & product_df"""

sellers_df = pd.merge(
    left=product_df,
    right=item_seller_df,
    how="left",
    left_on="product_id",
    right_on="product_id"
)
sellers_df.head()

sellers_df.sort_values(by="price", ascending=False)

sellers_df.groupby(by="product_category_name_english").agg({
    "order_id": "nunique",
    "price":  ["min", "max"]
})

"""### Explore geo_df"""

geo_df.sample(5)

def pretty_string(column):
    column_space = ' '.join(column.split())
    return unidecode.unidecode(column_space.lower())

geo_df['geolocation_city'] = geo_df['geolocation_city'].apply(pretty_string)

geo_df.groupby('geolocation_zip_code_prefix').size().sort_values(ascending=False)

geo_df[geo_df['geolocation_zip_code_prefix'] == 24220].head()

"""### Explore All Data
#### Merge all data
di kasus ini tidak digabungkan dataset geolocation, karena dataset tersebut menurut saya tidak terlalu diperlukan.
"""

all_data = pd.merge(
    left=customers_df,
    right=sellers_df,
    how="left",
    left_on="order_id",
    right_on="order_id"
)
all_data.head()

all_data.info()

all_data.groupby(by=["customer_city", "product_category_name_english"]).agg({
    "price": "sum",
    "freight_value": "sum"
})

all_data.groupby(by=["customer_state", "product_category_name_english"]).agg({
    "price": "sum",
    "freight_value": "sum"
})

all_data.groupby(by="customer_state").agg({
    "order_id": "nunique",
    "payment_value": "sum"
}).sort_values(by="payment_value", ascending=False)

all_data.groupby(by="product_category_name_english").agg({
    "order_id": "nunique",
    "review_score":  ["min", "max"]
})

"""### Convert all_data to .csv"""

all_data.to_csv('all_data.csv', index=False)

"""## Visualization & Explanatory Analysis

### Pertanyaan 1 : apa saja produk yang paling laris dan tidak?
"""

sum_order_items_df = all_data.groupby("product_category_name_english")["product_id"].count().reset_index()
sum_order_items_df = sum_order_items_df.rename(columns={"product_id": "products"})
sum_order_items_df = sum_order_items_df.sort_values(by="products", ascending=False)
sum_order_items_df = sum_order_items_df.head(10)

sum_order_items_df.head()

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))

colors = ["#068DA9", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="products", y="product_category_name_english", data=sum_order_items_df.head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("Produk paling laris", loc="center", fontsize=18)
ax[0].tick_params(axis ='y', labelsize=15)

sns.barplot(x="products", y="product_category_name_english", data=sum_order_items_df.sort_values(by="products", ascending=True).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Produk paling sedikit terjual", loc="center", fontsize=18)
ax[1].tick_params(axis='y', labelsize=15)

plt.suptitle("Produk paling laris dan paling sedikit terjual", fontsize=20)
plt.show()

"""> Pada grafik diatas,dapat dilihat Produk yang paling laris terjual adalah bed_bath_table. dan produk yang paling sedikit terjual adalah auto.

### Pertanyaan 2 :  Bagaimana performa penjualan platform E-Commerce dari waktu ke waktu waktu?
"""

monthly_df = all_data.resample(rule='M', on='order_approved_at').agg({
    "order_id": "nunique",
})
monthly_df.index = monthly_df.index.strftime('%B') #mengubah format order_approved_at menjadi Tahun-Bulan
monthly_df = monthly_df.reset_index()
monthly_df.rename(columns={
    "order_id": "order_count",
}, inplace=True)
monthly_df.head()

monthly_df = monthly_df.sort_values('order_count').drop_duplicates('order_approved_at', keep='last')

monthly_df.head()

monthly_df.sort_values(by='order_count')

month_mapping = {
    "January": 1,
    "February": 2,
    "March": 3,
    "April": 4,
    "May": 5,
    "June": 6,
    "July": 7,
    "August": 8,
    "September": 9,
    "October": 10,
    "November": 11,
    "December": 12
}

monthly_df["month_numeric"] = monthly_df["order_approved_at"].map(month_mapping)
monthly_df = monthly_df.sort_values("month_numeric")
monthly_df = monthly_df.drop("month_numeric", axis=1)

plt.figure(figsize=(10, 5))
plt.plot(
    monthly_df["order_approved_at"],
    monthly_df["order_count"],
    marker='o',
    linewidth=2,
    color="#068DA9"
)
plt.title("Number of Orders per Month (2018)", loc="center", fontsize=20)
plt.xticks(fontsize=10, rotation=25)
plt.yticks(fontsize=10)
plt.show()

"""Pada grafik diatas terdapat penurunan yang signifikan pada bulan September dan adapun pada bulan November terjadi kenaikan yang sangat signifikan.

### Pertanyaan 3 : seberapa banyak uang yang dihabiskan customer dalam beberapa bulan terakhir ini?
"""

monthly_spend_df = all_data.resample(rule='M', on='order_approved_at').agg({
    "payment_value":"sum"
})
monthly_spend_df.index = monthly_spend_df.index.strftime('%B') #mengubah format order_approved_at menjadi Tahun-Bulan
monthly_spend_df = monthly_spend_df.reset_index()
monthly_spend_df.rename(columns={
    "payment_value":"total_spend"
}, inplace=True)
monthly_spend_df.head()

monthly_spend_df = monthly_spend_df.sort_values('total_spend').drop_duplicates('order_approved_at', keep='last')

monthly_spend_df.head()

monthly_spend_df.sort_values(by='total_spend')

monthly_spend_df["month_numeric"] = monthly_spend_df["order_approved_at"].map(month_mapping)
monthly_spend_df = monthly_spend_df.sort_values("month_numeric")
monthly_spend_df = monthly_spend_df.drop("month_numeric", axis=1)

plt.figure(figsize=(10, 5))
plt.plot(
    monthly_spend_df["order_approved_at"],
    monthly_spend_df["total_spend"],
    marker='o',
    linewidth=2,
    color="#068DA9"
)
plt.title("Total customer spend money per Month (2018)", loc="center", fontsize=20)
plt.xticks(fontsize=10, rotation=25)
plt.yticks(fontsize=10)
plt.show()

"""Pada grafik diatas, total uang yang dihabiskan paling banyak pada bilang November dan paling sedikit pada bulan September.

### Pertanyaan 4 : Bagaimana tingkat kepuasan customer terhadap pelayanan kami?
"""

review_scores = all_data['review_score'].value_counts().sort_values(ascending=False)

most_common_score = review_scores.idxmax()

sns.set(style="darkgrid")

plt.figure(figsize=(10, 5))
sns.barplot(x=review_scores.index,
            y=review_scores.values,
            order=review_scores.index,
            palette=["#068DA9" if score == most_common_score else "#D3D3D3" for score in review_scores.index]
            )

plt.title("Rating by customers for service", fontsize=15)
plt.xlabel("Rating")
plt.ylabel("Count")
plt.xticks(fontsize=12)
plt.show()

"""Pada grafik diatas menunjukan bahwa pelanggan sangat puas dengan layanan yang telah disediakan, dimana data  menunjukkan bahwa customer memberikan rating 5 memiliki data terbanyak daripada rating yang lainnya.

### Pertanyaan 5 : Berdasarkan  profil demografis customer kami, apakah terdapat perbedaan preferensi pembelian di antara mereka?

#### Berdasarkan customer_state
"""

bystate_df = all_data.groupby(by="customer_state").customer_id.nunique().reset_index()
bystate_df.rename(columns={
    "customer_id": "customer_count"
}, inplace=True)
bystate_df.head()

plt.figure(figsize=(12, 6))

most_common_state = bystate_df.loc[bystate_df['customer_count'].idxmax(), 'customer_state']

bystate_df = bystate_df.sort_values(by='customer_count', ascending=False)

sns.barplot(x='customer_state',
            y='customer_count',
            data=bystate_df,
            palette=["#068DA9" if state == most_common_state else "#D3D3D3" for state in bystate_df['customer_state']]
            )

plt.title("Number customers from State", fontsize=15)
plt.xlabel("State")
plt.ylabel("Number Customers")
plt.xticks(fontsize=10)
plt.show()

"""Pada grafik diatas berdasarkan State, SP memiliki data pelanggan terbanyak."""

bycity_df = all_data['customer_city'].value_counts().head(10)

plt.figure(figsize=(12, 6))

most_common_city = bycity_df.idxmax()

bycity_df = bycity_df.sort_values(ascending=False)

sns.barplot(x=bycity_df.index,
            y=bycity_df.values,
            palette=["#068DA9" if city == most_common_city else "#D3D3D3" for city in bycity_df.index]
            )

plt.title("Number of Customers from Each City", fontsize=15)
plt.xlabel("City")
plt.ylabel("Number of Customers")
plt.xticks(rotation=45, fontsize=10)
plt.show()

"""Pada grafik diatas berdasarkan State, Sao Paulo memiliki data pelanggan dengan jumlah terbanyak"""

order_status_counts = all_data['order_status'].value_counts()

plt.figure(figsize=(8, 6))
order_status_counts.plot(kind='bar', color='skyblue')
plt.title('Order Status')
plt.xlabel('Status')
plt.ylabel('Number of Orders')
plt.show()

"""Pada grafik diatas status order paling banyak adalah delivered.

### Pertanyaan 6 : Darimana saja Customer terbanyak berdasarkan letak geografis?
"""

other_state_geolocation = geo_df.groupby(['geolocation_zip_code_prefix'])['geolocation_state'].nunique().reset_index(name='count')
other_state_geolocation[other_state_geolocation['count']>= 2].shape
max_state = geo_df.groupby(['geolocation_zip_code_prefix','geolocation_state']).size().reset_index(name='count').drop_duplicates(subset = 'geolocation_zip_code_prefix').drop('count',axis=1)

geolocation_silver = geo_df.groupby(['geolocation_zip_code_prefix','geolocation_city','geolocation_state'])[['geolocation_lat','geolocation_lng']].median().reset_index()
geolocation_silver = geolocation_silver.merge(max_state,on=['geolocation_zip_code_prefix','geolocation_state'],how='inner')

customers_silver = customers_df.merge(geolocation_silver,left_on='customer_zip_code_prefix',right_on='geolocation_zip_code_prefix',how='inner')

customers_silver.head()

customers_silver.to_csv("geolocation.csv", index=False)

def plot_brazil_map(data):
    brazil = mpimg.imread(urllib.request.urlopen('https://i.pinimg.com/originals/3a/0c/e1/3a0ce18b3c842748c255bc0aa445ad41.jpg'),'jpg')
    ax = data.plot(kind="scatter", x="geolocation_lng", y="geolocation_lat", figsize=(10,10), alpha=0.3,s=0.3,c='maroon')
    plt.axis('off')
    plt.imshow(brazil, extent=[-73.98283055, -33.8,-33.75116944,5.4])
    plt.show()

plot_brazil_map(customers_silver.drop_duplicates(subset='customer_unique_id'))

"""Terdapat Banyak customer yang berasalah negara dibagian tenggara dan selatan.

## Conclusion

- Apa saja Produk yang paling laris dan sedikit terjual?
> Dari hasil analisis yang diperoleh melalui visualisasi, dapat disimpulkan bahwa produk dalam kategori bed_bath_table merupakan produk yang paling banyak dibeli oleh customer. Hal ini bisa disebabkan oleh tingginya kebutuhan konsumen terhadap produk rumah tangga yang meliputi perabotan kamar tidur, kamar mandi, dan meja makan. Kategori ini cenderung menjadi pilihan utama bagi banyak customer, mungkin karena dianggap esensial dalam kehidupan sehari-hari. Di sisi lain, produk yang tergolong dalam kategori auto justru menempati posisi terbawah dalam hal penjualan. Produk ini, yang mungkin berkaitan dengan kebutuhan kendaraan atau aksesoris otomotif, tampaknya memiliki daya tarik yang lebih rendah di kalangan customer, kemungkinan karena sifatnya yang lebih spesifik dan tidak semua orang memerlukannya.
- Bagaimana performa penjualan pada platform E-Commerce dalam waktu ke waktu ?
> Berdasarkan tren penjualan yang dihasilkan dari visualisasi data, performa penjualan di platform E-Commerce menunjukkan pola yang menarik. Pada bulan Januari hingga Mei, penjualan berjalan cukup stabil, yang menunjukkan bahwa permintaan dari customer tetap tinggi di awal tahun. Namun, memasuki bulan Juni dan Juli, terdapat sedikit penurunan yang dapat diakibatkan oleh berbagai faktor, seperti musim liburan atau perubahan musiman dalam pola konsumsi customer. Meskipun demikian, di bulan Agustus penjualan kembali mengalami sedikit peningkatan, yang mungkin berkaitan dengan perayaan tertentu atau promosi musiman. Penurunan yang cukup signifikan terlihat pada bulan September, yang bisa jadi diakibatkan oleh berakhirnya musim liburan atau penghematan belanja oleh customer. Menariknya, pada bulan Oktober dan November, terjadi lonjakan penjualan yang cukup drastis, yang kemungkinan besar terkait dengan event belanja besar seperti Black Friday atau Cyber Monday. Penjualan kemudian menurun kembali di bulan Desember, meskipun tetap di atas rata-rata, yang mungkin disebabkan oleh customer yang telah selesai melakukan pembelian besar di bulan sebelumnya.
- Seberapa banyak uang yang dihabiskan customer dalam beberapa bulan terakhir?
> Jika dilihat dari total pengeluaran customer selama beberapa bulan terakhir, data menunjukkan bahwa antara bulan Januari hingga Mei, pengeluaran customer tetap stabil. Ini menunjukkan bahwa dalam periode tersebut, customer cenderung mempertahankan pola belanja yang konsisten, mungkin karena tidak ada perubahan besar dalam penawaran atau kebutuhan belanja mereka. Namun, pada bulan Juni hingga September, terlihat penurunan pengeluaran, yang mungkin disebabkan oleh faktor musiman atau strategi penghematan dari customer. Ketika masuk bulan Oktober dan November, terjadi peningkatan pengeluaran yang cukup signifikan, mencerminkan adanya lonjakan aktivitas belanja selama periode promosi besar-besaran seperti Black Friday. Setelah bulan November, pengeluaran customer kembali menurun pada bulan Desember, yang bisa diartikan bahwa banyak customer sudah melakukan belanja besar sebelumnya dan cenderung mengurangi pengeluaran mereka di akhir tahun.
- Bagaimana tingkat kepuasan customer terhadap pelayanan kami?
> Berdasarkan hasil survei kepuasan customer yang diperoleh melalui analisis rating, dapat dilihat bahwa tingkat kepuasan terhadap layanan yang diberikan oleh platform E-Commerce berada di level yang sangat tinggi. Mayoritas customer memberikan rating tertinggi, yakni rating 5, yang mencerminkan pengalaman belanja yang sangat memuaskan. Faktor-faktor seperti kecepatan pengiriman, kondisi barang yang diterima, serta layanan purna jual kemungkinan menjadi beberapa alasan utama yang mendorong customer untuk memberikan penilaian maksimal. Rating 4 juga berada di urutan kedua terbanyak, yang menunjukkan bahwa meskipun ada beberapa customer yang mungkin menemukan sedikit kekurangan dalam layanan, mereka tetap merasa puas dengan pengalaman keseluruhan yang ditawarkan oleh platform ini.
- Bagaimana profil demografis customer dan apakah ada perbedaan preferensi pembelian di antara mereka?
> Ketika melihat profil demografis customer berdasarkan data penjualan, dapat disimpulkan bahwa negara bagian dengan jumlah customer terbanyak adalah São Paulo (SP). Sebagai pusat ekonomi dan kota terbesar di Brasil, tidak mengherankan jika São Paulo menjadi pasar utama dengan jumlah transaksi yang paling banyak. Di posisi kedua adalah Rio de Janeiro (RJ), yang juga merupakan salah satu pusat ekonomi terbesar di negara tersebut. Dari segi status pesanan, mayoritas item yang dibeli oleh customer memiliki status delivered, yang berarti pesanan berhasil dikirim tanpa masalah, mengurangi potensi keluhan dari customer. Kondisi ini juga berkaitan dengan tingginya rating yang diberikan oleh customer, terutama rating 5, yang mencerminkan bahwa pengiriman yang tepat waktu dan barang yang sesuai ekspektasi berperan besar dalam kepuasan customer.
- Customer terbanyak berdasarkan letak geografis, dimana saja?
> Dari hasil visualisasi peta geografis, terlihat bahwa mayoritas customer berasal dari bagian tenggara dan selatan Brasil. Wilayah-wilayah ini termasuk São Paulo, Rio de Janeiro, dan Porto Alegre, yang merupakan kota-kota besar dengan aktivitas ekonomi yang tinggi. Keberadaan lebih banyak customer di daerah-daerah metropolitan ini dapat dijelaskan oleh tingginya konsentrasi penduduk serta daya beli yang lebih besar dibandingkan daerah-daerah lain. Kota-kota ini juga merupakan ibu kota negara bagian, yang menjadikannya pusat bisnis dan perdagangan, sehingga platform E-Commerce melihat volume penjualan yang lebih besar di wilayah-wilayah ini dibandingkan dengan daerah yang lebih terpencil.
"""